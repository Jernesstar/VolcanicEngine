#version 460 core

struct Particle {
    vec3 Position;
    vec3 Velocity;
    float Life;
};

struct EmitterSettings {
    vec3 Position;
    float ParticleLifetime;
};

layout(std430, binding = 0) buffer SSBO_0 {
    Particle Particles[];
};

layout(std430, binding = 1) buffer SSBO_1 {
    coherent int Count;
    int Indices[];
} FreeList;

layout(location = 0) uniform int u_ParticlesToSpawn;
layout(location = 1) uniform EmitterSettings u_Emitter;

// make a particle with random attributes
void MakeParticle(out Particle particle) {
    particle.Life = u_Emitter.ParticleLifetime;
    particle.Velocity = vec3(1.0f);
    particle.Position = u_Emitter.Position + vec3(1.0f);
}

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main() {
    uint index = gl_GlobalInvocationID.x;
    if(index >= u_ParticlesToSpawn)
        return;

    // undo decrement and return if nothing in freelist
    int freeListIndex = atomicAdd(FreeList.Count, -1) - 1;
    if(freeListIndex < 0) {
        atomicAdd(FreeList.Count, 1);
        return;
    }

    int particleIndex = FreeList.Indices[freeListIndex];
    MakeParticle(Particles[particleIndex]);
}