#version 450 core

struct Particle {
    vec4 Position;
    vec3 Velocity;
    float Life;
};

layout(std430, binding = 0) buffer SSBO_0 {
    Particle Particles[];
};

layout(std430, binding = 1) buffer SSBO_1 {
    coherent int Count;
    int Indices[];
} FreeList;

uniform float u_TimeStep;

void UpdateParticle(inout Particle particle, int index) {
    if(particle.Life > 0) {
        // particle.velocity += particle.accel * u_TimeStep;
        particle.Position += particle.Velocity * u_TimeStep;
        particle.life -= u_TimeStep;

        if(particle.life <= 0.0) {
            // particle.color.a = 0.0; // make the particle invisible
            FreeList.Indices[atomicAdd(FreeList.Count, 1)] = index;
        }
    }
}

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main() {
    uint index = gl_GlobalInvocationID.x;

    if(index >= Particles.length())
        return;

    UpdateParticle(Particles[index], int(index));
}